input {
            beats {
                        port => 5044
                    }
}

filter{
            grok{
                          match => { "message" => ["%{TIMESTAMP_ISO8601:created_at} %{DATA:uuid} %{DATA:user_node} %{INT:n_vms:int} %{INT:n_jobs:int} %{DATA:jobs_register} %{IPV4:IP}"]}
                    }
            aggregate {
              task_id => "%{uuid}"
              code => "
                              map['jobs'] ||=event.get('n_jobs')
                              map['vms'] ||=event.get('n_vms')
                              map['total_jobs'] ||=0 ; map['total_jobs'] +=  event.get('n_jobs');
                              map['total_vms'] ||=0 ; map['total_vms'] +=  event.get('n_vms');
                              map['job_occurences'] ||=0; map['job_occurences'] +=1; 
                             "
        #       code => "map['jobs'] ||=0 ; map['jobs'] += event.get('n_jobs');"
        #       push_previous_map_as_event => true
              push_map_as_event_on_timeout => true
              timeout_task_id_field => "uuid"
              timeout => 5 
              inactivity_timeout => 5 
              timeout_tags => ['_aggregatetimeout']
              timeout_code => "event.set('total_jobs',event.get('total_jobs'))
                                        event.set('total_vms',event.get('total_vms'))
                                        "
            }

}

output {
            if "_grokparsefailure" in [tags] {
            #     write events that didn't match to a file
            file { "path" => "/Users/basavyr/Library/Mobile Documents/com~apple~CloudDocs/Work/Pipeline/DevWorkspace/Github/ELK-Stack-macOS/Resources/LOGS/parse_failure.txt" }
            } 
            else 
            {
                    elasticsearch {
                                            hosts => ["http://localhost:9200"]
                                            manage_template => false
                                            index => "%{[fields][log_type]}-index"
                                        }
                    stdout{
                                    codec => rubydebug
                            }
            }
}
